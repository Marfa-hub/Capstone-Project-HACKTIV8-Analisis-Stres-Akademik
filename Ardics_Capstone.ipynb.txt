{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Capstone Project: Analisis Faktor Stres Akademik Mahasiswa"
      ],
      "metadata": {
        "id": "QoAR3sj3x1OR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install langchain_community\n",
        "!pip install replicate"
      ],
      "metadata": {
        "id": "K2xFRSLcf711",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0f94e8a-5f1b-4e6d-8fa4-b8135c3f30c2"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: langchain_community in /usr/local/lib/python3.12/dist-packages (0.4)\n",
            "Requirement already satisfied: langchain-core<2.0.0,>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (1.0.0)\n",
            "Requirement already satisfied: langchain-classic<2.0.0,>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (1.0.0)\n",
            "Requirement already satisfied: SQLAlchemy<3.0.0,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (2.0.44)\n",
            "Requirement already satisfied: requests<3.0.0,>=2.32.5 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (2.32.5)\n",
            "Requirement already satisfied: PyYAML<7.0.0,>=5.3.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (6.0.3)\n",
            "Requirement already satisfied: aiohttp<4.0.0,>=3.8.3 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (3.13.0)\n",
            "Requirement already satisfied: tenacity!=8.4.0,<10.0.0,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (8.5.0)\n",
            "Requirement already satisfied: dataclasses-json<0.7.0,>=0.6.7 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (0.6.7)\n",
            "Requirement already satisfied: pydantic-settings<3.0.0,>=2.10.1 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (2.11.0)\n",
            "Requirement already satisfied: langsmith<1.0.0,>=0.1.125 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (0.4.35)\n",
            "Requirement already satisfied: httpx-sse<1.0.0,>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (0.4.3)\n",
            "Requirement already satisfied: numpy>=1.26.2 in /usr/local/lib/python3.12/dist-packages (from langchain_community) (2.0.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.4.0)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (25.4.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.8.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (6.7.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (0.4.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.12/dist-packages (from aiohttp<4.0.0,>=3.8.3->langchain_community) (1.22.0)\n",
            "Requirement already satisfied: marshmallow<4.0.0,>=3.18.0 in /usr/local/lib/python3.12/dist-packages (from dataclasses-json<0.7.0,>=0.6.7->langchain_community) (3.26.1)\n",
            "Requirement already satisfied: typing-inspect<1,>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from dataclasses-json<0.7.0,>=0.6.7->langchain_community) (0.9.0)\n",
            "Requirement already satisfied: langchain-text-splitters<2.0.0,>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from langchain-classic<2.0.0,>=1.0.0->langchain_community) (1.0.0)\n",
            "Requirement already satisfied: pydantic<3.0.0,>=2.7.4 in /usr/local/lib/python3.12/dist-packages (from langchain-classic<2.0.0,>=1.0.0->langchain_community) (2.11.10)\n",
            "Requirement already satisfied: jsonpatch<2.0.0,>=1.33.0 in /usr/local/lib/python3.12/dist-packages (from langchain-core<2.0.0,>=1.0.0->langchain_community) (1.33)\n",
            "Requirement already satisfied: packaging<26.0.0,>=23.2.0 in /usr/local/lib/python3.12/dist-packages (from langchain-core<2.0.0,>=1.0.0->langchain_community) (25.0)\n",
            "Requirement already satisfied: typing-extensions<5.0.0,>=4.7.0 in /usr/local/lib/python3.12/dist-packages (from langchain-core<2.0.0,>=1.0.0->langchain_community) (4.15.0)\n",
            "Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.12/dist-packages (from langsmith<1.0.0,>=0.1.125->langchain_community) (0.28.1)\n",
            "Requirement already satisfied: orjson>=3.9.14 in /usr/local/lib/python3.12/dist-packages (from langsmith<1.0.0,>=0.1.125->langchain_community) (3.11.3)\n",
            "Requirement already satisfied: requests-toolbelt>=1.0.0 in /usr/local/lib/python3.12/dist-packages (from langsmith<1.0.0,>=0.1.125->langchain_community) (1.0.0)\n",
            "Requirement already satisfied: zstandard>=0.23.0 in /usr/local/lib/python3.12/dist-packages (from langsmith<1.0.0,>=0.1.125->langchain_community) (0.25.0)\n",
            "Requirement already satisfied: python-dotenv>=0.21.0 in /usr/local/lib/python3.12/dist-packages (from pydantic-settings<3.0.0,>=2.10.1->langchain_community) (1.1.1)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic-settings<3.0.0,>=2.10.1->langchain_community) (0.4.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.32.5->langchain_community) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.32.5->langchain_community) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.32.5->langchain_community) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3.0.0,>=2.32.5->langchain_community) (2025.10.5)\n",
            "Requirement already satisfied: greenlet>=1 in /usr/local/lib/python3.12/dist-packages (from SQLAlchemy<3.0.0,>=1.4.0->langchain_community) (3.2.4)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.23.0->langsmith<1.0.0,>=0.1.125->langchain_community) (4.11.0)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.23.0->langsmith<1.0.0,>=0.1.125->langchain_community) (1.0.9)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.12/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->langsmith<1.0.0,>=0.1.125->langchain_community) (0.16.0)\n",
            "Requirement already satisfied: jsonpointer>=1.9 in /usr/local/lib/python3.12/dist-packages (from jsonpatch<2.0.0,>=1.33.0->langchain-core<2.0.0,>=1.0.0->langchain_community) (3.0.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain-classic<2.0.0,>=1.0.0->langchain_community) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.12/dist-packages (from pydantic<3.0.0,>=2.7.4->langchain-classic<2.0.0,>=1.0.0->langchain_community) (2.33.2)\n",
            "Requirement already satisfied: mypy-extensions>=0.3.0 in /usr/local/lib/python3.12/dist-packages (from typing-inspect<1,>=0.4.0->dataclasses-json<0.7.0,>=0.6.7->langchain_community) (1.1.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.12/dist-packages (from anyio->httpx<1,>=0.23.0->langsmith<1.0.0,>=0.1.125->langchain_community) (1.3.1)\n",
            "Requirement already satisfied: replicate in /usr/local/lib/python3.12/dist-packages (1.0.7)\n",
            "Requirement already satisfied: httpx<1,>=0.21.0 in /usr/local/lib/python3.12/dist-packages (from replicate) (0.28.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from replicate) (25.0)\n",
            "Requirement already satisfied: pydantic>1.10.7 in /usr/local/lib/python3.12/dist-packages (from replicate) (2.11.10)\n",
            "Requirement already satisfied: typing_extensions>=4.5.0 in /usr/local/lib/python3.12/dist-packages (from replicate) (4.15.0)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.21.0->replicate) (4.11.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.21.0->replicate) (2025.10.5)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.21.0->replicate) (1.0.9)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.12/dist-packages (from httpx<1,>=0.21.0->replicate) (3.11)\n",
            "Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.12/dist-packages (from httpcore==1.*->httpx<1,>=0.21.0->replicate) (0.16.0)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>1.10.7->replicate) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.12/dist-packages (from pydantic>1.10.7->replicate) (2.33.2)\n",
            "Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.12/dist-packages (from pydantic>1.10.7->replicate) (0.4.2)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.12/dist-packages (from anyio->httpx<1,>=0.21.0->replicate) (1.3.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 1: Pemuatan dan Pembersihan Data\n",
        "Langkah 2: Analisis Eksplorasi Data (EDA)\n",
        "Langkah 3: Setup Model IBM Granite (Ini adalah sel tempat Anda memasukkan API key dan mendefinisikan output)"
      ],
      "metadata": {
        "id": "ExUljK_D0MSe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from langchain_community.llms import Replicate\n",
        "import os\n",
        "from google.colab import userdata\n",
        "# Set the API token\n",
        "api_token = userdata.get('api_token')\n",
        "os.environ[\"REPLICATE_API_TOKEN\"] = api_token\n",
        "# Model setup\n",
        "model = \"ibm-granite/granite-3.3-8b-instruct\"\n",
        "output = Replicate(\n",
        "model=model,\n",
        "replicate_api_token=api_token,\n",
        ")"
      ],
      "metadata": {
        "id": "sl0cyQpwknb2"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 4: Klasifikasi Baseline (Zero-Shot)"
      ],
      "metadata": {
        "id": "4Zjb79II1D2O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# === 1. Muat Data Anda ===\n",
        "# Pastikan 'academic_stress_cleaned.csv' sudah diunggah ke Colab\n",
        "file_name = 'academic_stress_cleaned.csv'\n",
        "try:\n",
        "    df = pd.read_csv(file_name)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File '{file_name}' tidak ditemukan. Harap unggah terlebih dahulu.\")\n",
        "    raise\n",
        "\n",
        "# === 2. Buat Kategori Stres ===\n",
        "def tentukan_kategori_stres(indeks):\n",
        "    if indeks <= 2:\n",
        "        return 'Stres Rendah'\n",
        "    elif indeks == 3:\n",
        "        return 'Stres Sedang'\n",
        "    else: # indeks 4 atau 5\n",
        "        return 'Stres Tinggi'\n",
        "\n",
        "df['kategori_stres'] = df['stress_index'].apply(tentukan_kategori_stres)\n",
        "\n",
        "# === 3. Adaptasi Template Anda ===\n",
        "\n",
        "# Define 'data mahasiswa' (setara dengan 'customer_reviews')\n",
        "# Kita ambil 3 mahasiswa acak untuk diklasifikasikan\n",
        "data_untuk_diklasifikasi_df = df.sample(n=3, random_state=77)\n",
        "\n",
        "# Simpan jawaban sebenarnya untuk perbandingan nanti\n",
        "jawaban_sebenarnya = data_untuk_diklasifikasi_df['kategori_stres'].tolist()\n",
        "\n",
        "# Buat daftar 'faktor' dalam format string\n",
        "daftar_faktor_mahasiswa = []\n",
        "for _, row in data_untuk_diklasifikasi_df.iterrows():\n",
        "    faktor = row.drop(['stress_index', 'kategori_stres', 'timestamp']).to_dict()\n",
        "    daftar_faktor_mahasiswa.append(str(faktor)) # Ubah dict ke string\n",
        "\n",
        "# Refine the prompt to include 'faktor' (setara dengan 'reviews_text')\n",
        "faktor_teks = \"\\n\".join([f\"Mahasiswa {i+1}: {faktor_str}\" for i, faktor_str in enumerate(daftar_faktor_mahasiswa)])\n",
        "\n",
        "prompt = f\"\"\"\n",
        "Klasifikasikan mahasiswa berikut sebagai Stres Rendah, Stres Sedang, atau Stres Tinggi:\n",
        "{faktor_teks}\n",
        "\"\"\"\n",
        "\n",
        "# === 4. Panggil Model & Cetak Hasil ===\n",
        "\n",
        "# Cetak prompt yang dikirim\n",
        "print(\"--- PROMPT YANG DIKIRIM KE MODEL ---\")\n",
        "print(prompt)\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Pastikan variabel 'output' sudah didefinisikan di sel sebelumnya\n",
        "try:\n",
        "    # Invoke the model with the example prompt\n",
        "    response = output.invoke(prompt)\n",
        "\n",
        "    # Print the response\n",
        "    print(\"Granite Model Response:\\n\")\n",
        "    print(response)\n",
        "\n",
        "    # Tambahan: Cetak jawaban sebenarnya untuk perbandingan\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"Jawaban Sebenarnya (untuk perbandingan):\")\n",
        "    for i, jawaban in enumerate(jawaban_sebenarnya):\n",
        "        print(f\"Mahasiswa {i+1}: {jawaban}\")\n",
        "        print(\"=\"*60)\n",
        "\n",
        "except NameError:\n",
        "    print(\"\\n!!! PENTING: Variabel 'output' belum didefinisikan. !!!\")\n",
        "    print(\"Anda perlu menjalankan kode setup model (misal: 'output = ...') dari modul Anda terlebih dahulu sebelum menjalankan sel ini.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nTerjadi error saat memanggil model: {e}\")\n",
        "    print(\"Pastikan model Anda telah di-setup dengan benar.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dg8TbDg5k4O9",
        "outputId": "04cba841-cb73-48ab-81d6-45a836965c89"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- PROMPT YANG DIKIRIM KE MODEL ---\n",
            "\n",
            "Klasifikasikan mahasiswa berikut sebagai Stres Rendah, Stres Sedang, atau Stres Tinggi:\n",
            "Mahasiswa 1: {'academic_stage': 'undergraduate', 'peer_pressure': 2, 'home_pressure': 2, 'study_environment': 'Noisy', 'coping_strategy': 'Analyze the situation and handle it with intellect', 'bad_habits': 'No', 'competition': 4}\n",
            "Mahasiswa 2: {'academic_stage': 'high school', 'peer_pressure': 4, 'home_pressure': 5, 'study_environment': 'Noisy', 'coping_strategy': 'Emotional breakdown (crying a lot)', 'bad_habits': 'No', 'competition': 3}\n",
            "Mahasiswa 3: {'academic_stage': 'undergraduate', 'peer_pressure': 3, 'home_pressure': 4, 'study_environment': 'Noisy', 'coping_strategy': 'Emotional breakdown (crying a lot)', 'bad_habits': 'Yes', 'competition': 4}\n",
            "\n",
            "============================================================\n",
            "Granite Model Response:\n",
            "\n",
            "Based on the given data, here's a classification of the students' stress levels:\n",
            "\n",
            "Mahasiswa 1: Stres Sedang\n",
            "Rationale: \n",
            "- Academic stage: Undergraduate (moderate stress, as it's a transition period)\n",
            "- Peer pressure: 2 (low)\n",
            "- Home pressure: 2 (low)\n",
            "- Study environment: Noisy (unfavorable, but could be managed with coping strategies)\n",
            "- Coping strategy: Analyze the situation and handle it with intellect (positive, indicating moderate stress)\n",
            "- Bad habits: No (suggests better stress management)\n",
            "- Competition: 4 (high, which generally implies more stress)\n",
            "\n",
            "Considering the moderate to high competition and undergraduate stage, Mahasiswa 1 experiences Stres Sedang.\n",
            "\n",
            "Mahasiswa 2: Stres Tinggi\n",
            "Rationale:\n",
            "- Academic stage: High school (transitional, often stressful)\n",
            "- Peer pressure: 4 (high)\n",
            "- Home pressure: 5 (very high)\n",
            "- Study environment: Noisy (unfavorable, compounding stress)\n",
            "- Coping strategy: Emotional breakdown (crying a lot) (negative, indicating high stress)\n",
            "- Bad habits: No (suggests they're aware of stressors but struggling to manage them effectively)\n",
            "- Competition: 3 (moderate, but combined with other factors, it's significant)\n",
            "\n",
            "The combination of high peer and home pressure, a noisy study environment, and emotional breakdown as a coping strategy points to Mahasiswa 2 experiencing Stres Tinggi.\n",
            "\n",
            "Mahasiswa 3: Stres Tinggi\n",
            "Rationale:\n",
            "- Academic stage: Undergraduate (moderate stress, but can be high depending on individual circumstances)\n",
            "- Peer pressure: 3 (moderate)\n",
            "- Home pressure: 4 (high)\n",
            "- Study environment: Noisy (unfavorable)\n",
            "- Coping strategy: Emotional breakdown (crying a lot) (negative, indicating high stress)\n",
            "- Bad habits: Yes (suggests poorer stress management)\n",
            "- Competition: 4 (high, which generally implies more stress)\n",
            "\n",
            "Mahasiswa 3 exhibits high home pressure, a noisy study environment, and uses emotional breakdown as a coping\n",
            "\n",
            "============================================================\n",
            "Jawaban Sebenarnya (untuk perbandingan):\n",
            "Mahasiswa 1: Stres Tinggi\n",
            "============================================================\n",
            "Mahasiswa 2: Stres Tinggi\n",
            "============================================================\n",
            "Mahasiswa 3: Stres Tinggi\n",
            "============================================================\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 5: Klasifikasi Refined (Few-Shot)"
      ],
      "metadata": {
        "id": "FlCvKsWl1LLK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# === 1. Muat Data Anda ===\n",
        "# Pastikan 'academic_stress_cleaned.csv' sudah diunggah ke Colab\n",
        "file_name = 'academic_stress_cleaned.csv'\n",
        "try:\n",
        "    df = pd.read_csv(file_name)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File '{file_name}' tidak ditemukan. Harap unggah terlebih dahulu.\")\n",
        "    raise\n",
        "\n",
        "# === 2. Buat Kategori Stres ===\n",
        "def tentukan_kategori_stres(indeks):\n",
        "    if indeks <= 2:\n",
        "        return 'Stres Rendah'\n",
        "    elif indeks == 3:\n",
        "        return 'Stres Sedang'\n",
        "    else: # indeks 4 atau 5\n",
        "        return 'Stres Tinggi'\n",
        "\n",
        "df['kategori_stres'] = df['stress_index'].apply(tentukan_kategori_stres)\n",
        "\n",
        "# Drop columns that are not part of the features before sampling\n",
        "df_features = df.drop(['stress_index', 'kategori_stres', 'timestamp'], axis=1)\n",
        "df_labels = df[['stress_index', 'kategori_stres']]\n",
        "\n",
        "# Combine features and labels back for sampling\n",
        "df_combined = pd.concat([df_features, df_labels], axis=1)\n",
        "\n",
        "\n",
        "# === 3. Bagian Inti \"Step 5: Refine the Prompt\" ===\n",
        "\n",
        "# 1. Ambil 3 data acak sebagai CONTOH (Ini adalah 'refinement')\n",
        "contoh_df = df_combined.sample(n=3, random_state=42)\n",
        "\n",
        "# 2. Ambil 1 data acak baru sebagai DATA UJI (yang akan kita klasifikasikan)\n",
        "data_uji_df = df_combined.drop(contoh_df.index).sample(n=1, random_state=10)\n",
        "\n",
        "# 3. Susun Teks Prompt yang \"Refined\"\n",
        "\n",
        "# Instruksi yang lebih jelas\n",
        "prompt = \"Tugas: Klasifikasikan 'Kategori Stres' (Stres Rendah, Stres Sedang, Stres Tinggi) berdasarkan faktor-faktor mahasiswa. Ikuti contoh format di bawah ini.\\n\\n\"\n",
        "\n",
        "# Tambahkan 3 CONTOH (Ini adalah \"Refinement\" / \"Few-Shot Learning\")\n",
        "prompt += \"--- CONTOH ---\\n\"\n",
        "for _, row in contoh_df.iterrows():\n",
        "    # Features are already separated in df_features, so we can just take the relevant columns\n",
        "    faktor = row[df_features.columns].to_dict()\n",
        "    kategori = row['kategori_stres']\n",
        "    prompt += f\"Faktor: {faktor}\\nKategori Stres: {kategori}\\n\\n\"\n",
        "\n",
        "# Tambahkan 1 DATA UJI (yang harus ditebak AI)\n",
        "prompt += \"--- DATA UJI ---\\n\"\n",
        "# Features are already separated in df_features, so we can just take the relevant columns\n",
        "faktor_uji = data_uji_df[df_features.columns].iloc[0].to_dict()\n",
        "\n",
        "# Kita simpan jawaban sebenarnya untuk perbandingan\n",
        "kategori_sebenarnya = data_uji_df['kategori_stres'].iloc[0]\n",
        "\n",
        "# Biarkan Kategori Stres kosong agar diisi oleh AI\n",
        "prompt += f\"Faktor: {faktor_uji}\\nKategori Stres: \"\n",
        "\n",
        "# === 4. Panggil Model & Cetak Hasil ===\n",
        "\n",
        "print(\"--- PROMPT YANG DI-REFINE (DIKIRIM KE MODEL) ---\")\n",
        "print(prompt)\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Pastikan variabel 'output' sudah didefinisikan di sel sebelumnya\n",
        "try:\n",
        "    # Invoke the model with the REFINED prompt\n",
        "    response = output.invoke(prompt)\n",
        "\n",
        "    # Print the response\n",
        "    print(\"Granite Model Response:\\n\")\n",
        "    print(response)\n",
        "\n",
        "    # Tambahan: Cetak jawaban sebenarnya untuk perbandingan\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"Evaluasi:\")\n",
        "    print(f\"Jawaban Sebenarnya: {kategori_sebenarnya}\")\n",
        "\n",
        "    # Evaluasi sederhana\n",
        "    if str(response).strip() == str(kategori_sebenarnya):\n",
        "        print(\"Hasil: Prediksi AI BENAR! ✅\")\n",
        "    else:\n",
        "        print(f\"Hasil: Prediksi AI SALAH. ❌\")\n",
        "    print(\"=\"*60)\n",
        "    print(\"\\nAnalisis Refinement: Prompt ini (few-shot) seharusnya memberikan hasil yang lebih akurat daripada prompt zero-shot (tanpa contoh) karena kita 'mengajari' modelnya terlebih dahulu.\")\n",
        "\n",
        "except NameError:\n",
        "    print(\"\\n!!! PENTING: Variabel 'output' belum didefinisikan. !!!\")\n",
        "    print(\"Anda perlu menjalankan kode setup model (misal: 'output = ...') dari modul Anda terlebih dahulu sebelum menjalankan sel ini.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nTerjadi error saat memanggil model: {e}\")\n",
        "    print(\"Pastikan model Anda telah di-setup dengan benar.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6bUySbgumPLt",
        "outputId": "161b0770-1d69-4a2b-b1ed-d10beb4bfd37"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- PROMPT YANG DI-REFINE (DIKIRIM KE MODEL) ---\n",
            "Tugas: Klasifikasikan 'Kategori Stres' (Stres Rendah, Stres Sedang, Stres Tinggi) berdasarkan faktor-faktor mahasiswa. Ikuti contoh format di bawah ini.\n",
            "\n",
            "--- CONTOH ---\n",
            "Faktor: {'academic_stage': 'undergraduate', 'peer_pressure': 4, 'home_pressure': 2, 'study_environment': 'disrupted', 'coping_strategy': 'Analyze the situation and handle it with intellect', 'bad_habits': 'No', 'competition': 3}\n",
            "Kategori Stres: Stres Sedang\n",
            "\n",
            "Faktor: {'academic_stage': 'undergraduate', 'peer_pressure': 4, 'home_pressure': 3, 'study_environment': 'Peaceful', 'coping_strategy': 'Analyze the situation and handle it with intellect', 'bad_habits': 'No', 'competition': 4}\n",
            "Kategori Stres: Stres Tinggi\n",
            "\n",
            "Faktor: {'academic_stage': 'undergraduate', 'peer_pressure': 3, 'home_pressure': 1, 'study_environment': 'disrupted', 'coping_strategy': 'Emotional breakdown (crying a lot)', 'bad_habits': 'No', 'competition': 4}\n",
            "Kategori Stres: Stres Tinggi\n",
            "\n",
            "--- DATA UJI ---\n",
            "Faktor: {'academic_stage': 'undergraduate', 'peer_pressure': 3, 'home_pressure': 4, 'study_environment': 'Peaceful', 'coping_strategy': 'Analyze the situation and handle it with intellect', 'bad_habits': 'No', 'competition': 3}\n",
            "Kategori Stres: \n",
            "============================================================\n",
            "\n",
            "Terjadi error saat memanggil model: ReplicateError Details:\n",
            "status: 429\n",
            "detail: Request was throttled. Your rate limit for creating predictions is reduced to 6 requests per minute with a burst of 1 requests until you add a payment method. Your rate limit resets in ~3s.\n",
            "Pastikan model Anda telah di-setup dengan benar.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 6: Rangkuman Baseline"
      ],
      "metadata": {
        "id": "aQqEb1X01OzZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# === 1. Muat Data Anda ===\n",
        "# Pastikan 'academic_stress_cleaned.csv' sudah diunggah ke Colab\n",
        "file_name = 'academic_stress_cleaned.csv'\n",
        "try:\n",
        "    df = pd.read_csv(file_name)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File '{file_name}' tidak ditemukan. Harap unggah terlebih dahulu.\")\n",
        "    raise\n",
        "\n",
        "# === 2. Buat Kategori Stres ===\n",
        "def tentukan_kategori_stres(indeks):\n",
        "    if indeks <= 2:\n",
        "        return 'Stres Rendah'\n",
        "    elif indeks == 3:\n",
        "        return 'Stres Sedang'\n",
        "    else: # indeks 4 atau 5\n",
        "        return 'Stres Tinggi'\n",
        "\n",
        "df['kategori_stres'] = df['stress_index'].apply(tentukan_kategori_stres)\n",
        "\n",
        "# === 3. Buat \"Transkrip\" dari Temuan Data (Adaptasi Step 6) ===\n",
        "\n",
        "# 1. Hitung distribusi stres\n",
        "distribusi_stres = df['kategori_stres'].value_counts(normalize=True) * 100\n",
        "distribusi_teks = \"Distribusi Kategori Stres:\\n\"\n",
        "for kategori, persen in distribusi_stres.items():\n",
        "    distribusi_teks += f\"- {kategori}: {persen:.1f}%\\n\"\n",
        "\n",
        "# 2. Hitung rata-rata faktor tekanan untuk tiap kategori stres\n",
        "rata_rata_faktor = df.groupby('kategori_stres')[['peer_pressure', 'home_pressure', 'competition']].mean()\n",
        "rata_rata_teks = \"Rata-rata Faktor per Kategori Stres (skala 1-5):\\n\"\n",
        "for kategori, stats in rata_rata_faktor.iterrows():\n",
        "    rata_rata_teks += f\"- Untuk {kategori}:\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Peer Pressure: {stats['peer_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Home Pressure: {stats['home_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Competition: {stats['competition']:.2f}\\n\"\n",
        "\n",
        "# 3. Gabungkan temuan menjadi \"Transkrip\"\n",
        "data_findings_transcript = f\"\"\"\n",
        "Temuan Analisis Data Stres Akademik:\n",
        "\n",
        "{distribusi_teks}\n",
        "{rata_rata_teks}\n",
        "\"\"\"\n",
        "\n",
        "# 4. Buat Prompt Rangkuman (Baseline Prompt)\n",
        "prompt = f\"\"\"\n",
        "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points) yang menyoroti wawasan paling penting bagi seorang dekan universitas.\n",
        "\n",
        "--- Transkrip Temuan Data ---\n",
        "{data_findings_transcript}\n",
        "--- Akhir Transkrip ---\n",
        "\n",
        "Rangkuman 3 Poin Utama:\n",
        "\"\"\"\n",
        "\n",
        "# === 4. Panggil Model & Cetak Hasil ===\n",
        "\n",
        "print(\"--- PROMPT RANGKUMAN (BASELINE) DIKIRIM KE MODEL ---\")\n",
        "print(prompt)\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Pastikan variabel 'output' sudah didefinisikan di sel sebelumnya\n",
        "try:\n",
        "    # Invoke the model with the example prompt\n",
        "    response = output.invoke(prompt)\n",
        "\n",
        "    # Print the response\n",
        "    print(\"Granite Model Response (Rangkuman):\\n\")\n",
        "    print(response)\n",
        "    print(\"=\"*60)\n",
        "    print(\"\\nAnalisis: Ini adalah rangkuman baseline. Langkah selanjutnya adalah me-refine prompt ini jika hasilnya kurang tajam atau tidak fokus.\")\n",
        "\n",
        "except NameError:\n",
        "    print(\"\\n!!! PENTING: Variabel 'output' belum didefinisikan. !!!\")\n",
        "    print(\"Anda perlu menjalankan kode setup model (misal: 'output = ...') dari modul Anda terlebih dahulu sebelum menjalankan sel ini.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nTerjadi error saat memanggil model: {e}\")\n",
        "    print(\"Pastikan model Anda telah di-setup dengan benar.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VRuwP4PlnDSY",
        "outputId": "0e1218ec-6412-4979-9149-479f55a8b5cd"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- PROMPT RANGKUMAN (BASELINE) DIKIRIM KE MODEL ---\n",
            "\n",
            "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points) yang menyoroti wawasan paling penting bagi seorang dekan universitas.\n",
            "\n",
            "--- Transkrip Temuan Data ---\n",
            "\n",
            "Temuan Analisis Data Stres Akademik:\n",
            "\n",
            "Distribusi Kategori Stres:\n",
            "- Stres Tinggi: 63.3%\n",
            "- Stres Sedang: 25.9%\n",
            "- Stres Rendah: 10.8%\n",
            "\n",
            "Rata-rata Faktor per Kategori Stres (skala 1-5):\n",
            "- Untuk Stres Rendah:\n",
            "  - Rata-rata Peer Pressure: 2.07\n",
            "  - Rata-rata Home Pressure: 2.00\n",
            "  - Rata-rata Competition: 2.07\n",
            "- Untuk Stres Sedang:\n",
            "  - Rata-rata Peer Pressure: 2.69\n",
            "  - Rata-rata Home Pressure: 3.00\n",
            "  - Rata-rata Competition: 3.53\n",
            "- Untuk Stres Tinggi:\n",
            "  - Rata-rata Peer Pressure: 3.38\n",
            "  - Rata-rata Home Pressure: 3.43\n",
            "  - Rata-rata Competition: 3.70\n",
            "\n",
            "\n",
            "--- Akhir Transkrip ---\n",
            "\n",
            "Rangkuman 3 Poin Utama:\n",
            "\n",
            "============================================================\n",
            "\n",
            "Terjadi error saat memanggil model: ReplicateError Details:\n",
            "status: 429\n",
            "detail: Request was throttled. Your rate limit for creating predictions is reduced to 6 requests per minute with a burst of 1 requests until you add a payment method. Your rate limit resets in ~3s.\n",
            "Pastikan model Anda telah di-setup dengan benar.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 7: Rangkuman Refined (Prompt Tuning)"
      ],
      "metadata": {
        "id": "pPIivrNE1TpV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# === 1. Muat Data Anda ===\n",
        "# Pastikan 'academic_stress_cleaned.csv' sudah diunggah ke Colab\n",
        "file_name = 'academic_stress_cleaned.csv'\n",
        "try:\n",
        "    df = pd.read_csv(file_name)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File '{file_name}' tidak ditemukan. Harap unggah terlebih dahulu.\")\n",
        "    raise\n",
        "\n",
        "# === 2. Buat Kategori Stres ===\n",
        "def tentukan_kategori_stres(indeks):\n",
        "    if indeks <= 2:\n",
        "        return 'Stres Rendah'\n",
        "    elif indeks == 3:\n",
        "        return 'Stres Sedang'\n",
        "    else: # indeks 4 atau 5\n",
        "        return 'Stres Tinggi'\n",
        "\n",
        "df['kategori_stres'] = df['stress_index'].apply(tentukan_kategori_stres)\n",
        "\n",
        "# === 3. Buat \"Transkrip\" dari Temuan Data (Sama seperti Step 6) ===\n",
        "\n",
        "# 1. Hitung distribusi stres\n",
        "distribusi_stres = df['kategori_stres'].value_counts(normalize=True) * 100\n",
        "distribusi_teks = \"Distribusi Kategori Stres:\\n\"\n",
        "for kategori, persen in distribusi_stres.items():\n",
        "    distribusi_teks += f\"- {kategori}: {persen:.1f}%\\n\"\n",
        "\n",
        "# 2. Hitung rata-rata faktor tekanan untuk tiap kategori stres\n",
        "rata_rata_faktor = df.groupby('kategori_stres')[['peer_pressure', 'home_pressure', 'competition']].mean()\n",
        "rata_rata_teks = \"Rata-rata Faktor per Kategori Stres (skala 1-5):\\n\"\n",
        "for kategori, stats in rata_rata_faktor.iterrows():\n",
        "    rata_rata_teks += f\"- Untuk {kategori}:\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Peer Pressure: {stats['peer_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Home Pressure: {stats['home_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Competition: {stats['competition']:.2f}\\n\"\n",
        "\n",
        "# 3. Gabungkan temuan menjadi \"Transkrip\"\n",
        "data_findings_transcript = f\"\"\"\n",
        "Temuan Analisis Data Stres Akademik:\n",
        "\n",
        "{distribusi_teks}\n",
        "{rata_rata_teks}\n",
        "\"\"\"\n",
        "\n",
        "# === 4. Buat Prompt Rangkuman yang Telah Di-Refine (Step 7) ===\n",
        "# Perhatikan instruksi yang jauh lebih spesifik\n",
        "prompt = f\"\"\"\n",
        "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points).\n",
        "\n",
        "Pastikan rangkuman Anda SANGAT TAJAM dan FOKUS pada:\n",
        "1. Kategori stres (Rendah, Sedang, Tinggi) mana yang paling banyak dialami mahasiswa.\n",
        "2. Faktor tekanan spesifik (peer, home, competition) apa yang paling menonjol (memiliki rata-rata tertinggi) pada kelompok 'Stres Tinggi'.\n",
        "3. Wawasan penting lainnya yang bisa ditindaklanjuti oleh seorang dekan.\n",
        "\n",
        "--- Transkrip Temuan Data ---\n",
        "{data_findings_transcript}\n",
        "--- Akhir Transkrip ---\n",
        "\n",
        "Rangkuman 3 Poin Utama yang Telah Difokuskan:\n",
        "\"\"\"\n",
        "\n",
        "# === 5. Panggil Model & Cetak Hasil ===\n",
        "\n",
        "print(\"--- PROMPT RANGKUMAN (REFINED) DIKIRIM KE MODEL ---\")\n",
        "print(prompt)\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Pastikan variabel 'output' sudah didefinisikan di sel sebelumnya\n",
        "try:\n",
        "    # Invoke the model with the REFINED prompt\n",
        "    response = output.invoke(prompt)\n",
        "\n",
        "    # Print the response\n",
        "    print(\"Granite Model Response (Rangkuman Refined):\\n\")\n",
        "    print(response)\n",
        "    print(\"=\"*60)\n",
        "    print(\"\\nAnalisis: Dengan memberikan fokus yang spesifik (poin 1, 2, 3), rangkuman yang dihasilkan AI seharusnya lebih tajam dan relevan (actionable) dibandingkan prompt baseline.\")\n",
        "\n",
        "except NameError:\n",
        "    print(\"\\n!!! PENTING: Variabel 'output' belum didefinisikan. !!!\")\n",
        "    print(\"Anda perlu menjalankan kode setup model (misal: 'output = ...') dari modul Anda terlebih dahulu sebelum menjalankan sel ini.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nTerjadi error saat memanggil model: {e}\")\n",
        "    print(\"Pastikan model Anda telah di-setup dengan benar.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cAn-uZeHnjZc",
        "outputId": "e1a91fe4-f8c7-4d9f-e062-089c2f461cc3"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- PROMPT RANGKUMAN (REFINED) DIKIRIM KE MODEL ---\n",
            "\n",
            "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points).\n",
            "\n",
            "Pastikan rangkuman Anda SANGAT TAJAM dan FOKUS pada:\n",
            "1. Kategori stres (Rendah, Sedang, Tinggi) mana yang paling banyak dialami mahasiswa.\n",
            "2. Faktor tekanan spesifik (peer, home, competition) apa yang paling menonjol (memiliki rata-rata tertinggi) pada kelompok 'Stres Tinggi'.\n",
            "3. Wawasan penting lainnya yang bisa ditindaklanjuti oleh seorang dekan.\n",
            "\n",
            "--- Transkrip Temuan Data ---\n",
            "\n",
            "Temuan Analisis Data Stres Akademik:\n",
            "\n",
            "Distribusi Kategori Stres:\n",
            "- Stres Tinggi: 63.3%\n",
            "- Stres Sedang: 25.9%\n",
            "- Stres Rendah: 10.8%\n",
            "\n",
            "Rata-rata Faktor per Kategori Stres (skala 1-5):\n",
            "- Untuk Stres Rendah:\n",
            "  - Rata-rata Peer Pressure: 2.07\n",
            "  - Rata-rata Home Pressure: 2.00\n",
            "  - Rata-rata Competition: 2.07\n",
            "- Untuk Stres Sedang:\n",
            "  - Rata-rata Peer Pressure: 2.69\n",
            "  - Rata-rata Home Pressure: 3.00\n",
            "  - Rata-rata Competition: 3.53\n",
            "- Untuk Stres Tinggi:\n",
            "  - Rata-rata Peer Pressure: 3.38\n",
            "  - Rata-rata Home Pressure: 3.43\n",
            "  - Rata-rata Competition: 3.70\n",
            "\n",
            "\n",
            "--- Akhir Transkrip ---\n",
            "\n",
            "Rangkuman 3 Poin Utama yang Telah Difokuskan:\n",
            "\n",
            "============================================================\n",
            "\n",
            "Terjadi error saat memanggil model: ReplicateError Details:\n",
            "status: 429\n",
            "detail: Request was throttled. Your rate limit for creating predictions is reduced to 6 requests per minute with a burst of 1 requests until you add a payment method. Your rate limit resets in ~3s.\n",
            "Pastikan model Anda telah di-setup dengan benar.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Langkah 8: Rangkuman Refined (Parameter Tuning)"
      ],
      "metadata": {
        "id": "GQZ_Oaxc1WTD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# === 1. Muat Data Anda ===\n",
        "# Pastikan 'academic_stress_cleaned.csv' sudah diunggah ke Colab\n",
        "file_name = 'academic_stress_cleaned.csv'\n",
        "try:\n",
        "    df = pd.read_csv(file_name)\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: File '{file_name}' tidak ditemukan. Harap unggah terlebih dahulu.\")\n",
        "    raise\n",
        "\n",
        "# === 2. Buat Kategori Stres ===\n",
        "def tentukan_kategori_stres(indeks):\n",
        "    if indeks <= 2:\n",
        "        return 'Stres Rendah'\n",
        "    elif indeks == 3:\n",
        "        return 'Stres Sedang'\n",
        "    else: # indeks 4 atau 5\n",
        "        return 'Stres Tinggi'\n",
        "\n",
        "df['kategori_stres'] = df['stress_index'].apply(tentukan_kategori_stres)\n",
        "\n",
        "# === 3. Buat \"Transkrip\" dari Temuan Data (Sama seperti Step 6 & 7) ===\n",
        "\n",
        "# 1. Hitung distribusi stres\n",
        "distribusi_stres = df['kategori_stres'].value_counts(normalize=True) * 100\n",
        "distribusi_teks = \"Distribusi Kategori Stres:\\n\"\n",
        "for kategori, persen in distribusi_stres.items():\n",
        "    distribusi_teks += f\"- {kategori}: {persen:.1f}%\\n\"\n",
        "\n",
        "# 2. Hitung rata-rata faktor tekanan untuk tiap kategori stres\n",
        "rata_rata_faktor = df.groupby('kategori_stres')[['peer_pressure', 'home_pressure', 'competition']].mean()\n",
        "rata_rata_teks = \"Rata-rata Faktor per Kategori Stres (skala 1-5):\\n\"\n",
        "for kategori, stats in rata_rata_faktor.iterrows():\n",
        "    rata_rata_teks += f\"- Untuk {kategori}:\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Peer Pressure: {stats['peer_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Home Pressure: {stats['home_pressure']:.2f}\\n\"\n",
        "    rata_rata_teks += f\"  - Rata-rata Competition: {stats['competition']:.2f}\\n\"\n",
        "\n",
        "# 3. Gabungkan temuan menjadi \"Transkrip\"\n",
        "data_findings_transcript = f\"\"\"\n",
        "Temuan Analisis Data Stres Akademik:\n",
        "\n",
        "{distribusi_teks}\n",
        "{rata_rata_teks}\n",
        "\"\"\"\n",
        "\n",
        "# 4. Gunakan Prompt Rangkuman yang Refined (Sama seperti Step 7)\n",
        "prompt = f\"\"\"\n",
        "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points).\n",
        "\n",
        "Pastikan rangkuman Anda SANGAT TAJAM dan FOKUS pada:\n",
        "1. Kategori stres (Rendah, Sedang, Tinggi) mana yang paling banyak dialami mahasiswa.\n",
        "2. Faktor tekanan spesifik (peer, home, competition) apa yang paling menonjol (memiliki rata-rata tertinggi) pada kelompok 'Stres Tinggi'.\n",
        "3. Wawasan penting lainnya yang bisa ditindaklanjuti oleh seorang dekan.\n",
        "\n",
        "--- Transkrip Temuan Data ---\n",
        "{data_findings_transcript}\n",
        "--- Akhir Transkrip ---\n",
        "\n",
        "Rangkuman 3 Poin Utama yang Telah Difokuskan:\n",
        "\"\"\"\n",
        "\n",
        "# === 5. Tentukan Parameter (INI ADALAH LANGKAH BARUNYA) ===\n",
        "# Kita ingin jawaban yang FOKUS dan RINGKAS\n",
        "model_parameters = {\n",
        "    \"max_tokens\": 100,         # Buat jawaban lebih pendek\n",
        "    \"top_k\": 10,               # Kurangi kreativitas, lebih fokus\n",
        "    \"top_p\": 0.7,              # Kurangi kreativitas, lebih fokus\n",
        "    \"repetition_penalty\": 1.2  # Hindari pengulangan\n",
        "}\n",
        "\n",
        "# === 6. Panggil Model DENGAN PARAMETER BARU ===\n",
        "\n",
        "print(\"--- PROMPT RANGKUMAN (REFINED) DIKIRIM KE MODEL ---\")\n",
        "print(prompt)\n",
        "print(\"=\"*60)\n",
        "print(f\"--- DIJALANKAN DENGAN PARAMETER: {model_parameters} ---\")\n",
        "print(\"=\"*60)\n",
        "\n",
        "# Pastikan variabel 'output' sudah didefinisikan di sel sebelumnya\n",
        "try:\n",
        "    # Panggil model, tapi kali ini tambahkan parameter\n",
        "    response = output.invoke(prompt, **model_parameters)\n",
        "\n",
        "    # Print the response\n",
        "    print(\"Granite Model Response (Dengan Parameter Baru):\\n\")\n",
        "    print(response)\n",
        "    print(\"=\"*60)\n",
        "    print(\"\\nAnalisis: Bandingkan hasil ini dengan hasil dari Step 7. Apakah lebih pendek? Lebih fokus? Ini adalah inti dari 'Parameter Tuning'.\")\n",
        "    print(\"Jangan lupa catat ini di LOGBOOK Anda!\")\n",
        "\n",
        "except NameError:\n",
        "    print(\"\\n!!! PENTING: Variabel 'output' belum didefinisikan. !!!\")\n",
        "    print(\"Anda perlu menjalankan kode setup model (misal: 'output = ...') dari modul Anda terlebih dahulu sebelum menjalankan sel ini.\")\n",
        "except Exception as e:\n",
        "    print(f\"\\nTerjadi error saat memanggil model: {e}\")\n",
        "    print(\"Pastikan model Anda telah di-setup dengan benar. Jika error-nya 'unexpected keyword argument', setup model Anda mungkin tidak mendukung parameter runtime.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SKs4EUTuo8is",
        "outputId": "07f577b7-de0a-4d5e-e9e8-c90bab445887"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- PROMPT RANGKUMAN (REFINED) DIKIRIM KE MODEL ---\n",
            "\n",
            "Tugas: Anda adalah seorang analis data. Baca \"transkrip\" temuan analisis data di bawah ini dan buatkan rangkuman (summary) dalam 3 poin utama (bullet points).\n",
            "\n",
            "Pastikan rangkuman Anda SANGAT TAJAM dan FOKUS pada:\n",
            "1. Kategori stres (Rendah, Sedang, Tinggi) mana yang paling banyak dialami mahasiswa.\n",
            "2. Faktor tekanan spesifik (peer, home, competition) apa yang paling menonjol (memiliki rata-rata tertinggi) pada kelompok 'Stres Tinggi'.\n",
            "3. Wawasan penting lainnya yang bisa ditindaklanjuti oleh seorang dekan.\n",
            "\n",
            "--- Transkrip Temuan Data ---\n",
            "\n",
            "Temuan Analisis Data Stres Akademik:\n",
            "\n",
            "Distribusi Kategori Stres:\n",
            "- Stres Tinggi: 63.3%\n",
            "- Stres Sedang: 25.9%\n",
            "- Stres Rendah: 10.8%\n",
            "\n",
            "Rata-rata Faktor per Kategori Stres (skala 1-5):\n",
            "- Untuk Stres Rendah:\n",
            "  - Rata-rata Peer Pressure: 2.07\n",
            "  - Rata-rata Home Pressure: 2.00\n",
            "  - Rata-rata Competition: 2.07\n",
            "- Untuk Stres Sedang:\n",
            "  - Rata-rata Peer Pressure: 2.69\n",
            "  - Rata-rata Home Pressure: 3.00\n",
            "  - Rata-rata Competition: 3.53\n",
            "- Untuk Stres Tinggi:\n",
            "  - Rata-rata Peer Pressure: 3.38\n",
            "  - Rata-rata Home Pressure: 3.43\n",
            "  - Rata-rata Competition: 3.70\n",
            "\n",
            "\n",
            "--- Akhir Transkrip ---\n",
            "\n",
            "Rangkuman 3 Poin Utama yang Telah Difokuskan:\n",
            "\n",
            "============================================================\n",
            "--- DIJALANKAN DENGAN PARAMETER: {'max_tokens': 100, 'top_k': 10, 'top_p': 0.7, 'repetition_penalty': 1.2} ---\n",
            "============================================================\n",
            "\n",
            "Terjadi error saat memanggil model: ReplicateError Details:\n",
            "status: 429\n",
            "detail: Request was throttled. Your rate limit for creating predictions is reduced to 6 requests per minute with a burst of 1 requests until you add a payment method. Your rate limit resets in ~3s.\n",
            "Pastikan model Anda telah di-setup dengan benar. Jika error-nya 'unexpected keyword argument', setup model Anda mungkin tidak mendukung parameter runtime.\n"
          ]
        }
      ]
    }
  ]
}